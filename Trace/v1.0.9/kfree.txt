> #define kfree(x) kfree_s((x), 0)

> void kfree_s (void *ptr,int size)
{
unsigned long flags;
int order;
register struct block_header *p=((struct block_header *)ptr) -1;
struct page_descriptor *page,*pg2;

page = PAGE_DESC (p);
order = page->order;

if ((order < 0) || 
    (order > sizeof (sizes)/sizeof (sizes[0])) ||
    (((long)(page->next)) & ~PAGE_MASK) ||
    (p->bh_flags != MF_USED))
    {
    printk ("kfree of non-kmalloced memory: %p, next= %p, order=%d\n",
                p, page->next, page->order);
    return;
    }
// order 應該是表示這個page的malloc size class。如果不屬於先前定義的class種類，page的next有包含intra-page address bits，
// 或是block header的flag狀態不正確，就不做動作並返回。

if (size &&
    size != p->bh_length)
    {
    printk ("Trying to free pointer at %p with wrong size: %d instead of %lu.\n",
        p,size,p->bh_length);
    return;
    }
//如果有指定size參數，並且長度跟紀錄在block_header的不一樣，就不做動作返回。

size = p->bh_length;
p->bh_flags = MF_FREE; /* As of now this block is officially free */

save_flags(flags); //把eflags暫存器存到flags變數。
cli (); //關掉interrupts? 變成atomic狀態

p->bh_next = page->firstfree;
page->firstfree = p;
page->nfree ++;
//把目前block_header的bh_next指向page的firstfree，把page的firstfree指向block_header，將空的block個數加一。

if (page->nfree == 1)
   { /* Page went from full to one free block: put it on the freelist */
   if (page->next)
        {
        printk ("Page %p already on freelist dazed and confused....\n", page);
        }
   else
        {
        page->next = sizes[order].firstfree;
        sizes[order].firstfree = page;
        }
   }
//如果目前page的nfree從0變成1，需要將它加入free list，因為之前是滿的。會插入到第一個。

/* If page is completely free, free it */
if (page->nfree == NBLOCKS (page->order))
    {
#if 0
    printk ("Freeing page %08x.\n", (long)page);
#endif
    if (sizes[order].firstfree == page)
        {
        sizes[order].firstfree = page->next;
        }
    else
        {
        for (pg2=sizes[order].firstfree;
                (pg2 != NULL) && (pg2->next != page);
                        pg2=pg2->next)
            /* Nothing */;
        if (pg2 != NULL)
            pg2->next = page->next;
        else
            printk ("Ooops. page %p doesn't show on freelist.\n", page);
        }
    free_page ((long)page); //IF
    }
//如果page的nfree等於sizes指定的block數，就是完全空了，把它從sizes的free list移除，用single link list方法。移除後執行free_page。

restore_flags(flags);

sizes[order].nfrees++;      /* Noncritical (monitoring) admin stuff */
sizes[order].nbytesmalloced -= size;
}


> #define PAGE_DESC(p) ((struct page_descriptor *)(((unsigned long)(p)) & PAGE_MASK))


> #define PAGE_MASK			(~(PAGE_SIZE-1)) 			/* to mask away the intra-page address bits */


> #define PAGE_SIZE			((unsigned long)1<<PAGE_SHIFT)

			
> #define PAGE_SHIFT			12 /* PAGE_SHIFT determines the page size */


>
/*
 * A size descriptor describes a specific class of malloc sizes.
 * Each class of sizes has its own freelist.
 */

struct size_descriptor {
	struct page_descriptor *firstfree;
	int size;
	int nblocks;

	int nmallocs;
	int nfrees;
	int nbytesmalloced;
	int npages;
};

struct size_descriptor sizes[] = { 
	{ NULL,  32,127, 0,0,0,0 },
	{ NULL,  64, 63, 0,0,0,0 },
	{ NULL, 128, 31, 0,0,0,0 },
	{ NULL, 252, 16, 0,0,0,0 },
	{ NULL, 508,  8, 0,0,0,0 },
	{ NULL,1020,  4, 0,0,0,0 },
	{ NULL,2040,  2, 0,0,0,0 },
	{ NULL,4080,  1, 0,0,0,0 },
	{ NULL,   0,  0, 0,0,0,0 }
};

>
/* 
 * The page descriptor is at the front of every page that malloc has in use. 
 */

struct page_descriptor {
	struct page_descriptor *next;
	struct block_header *firstfree;
	int order;
	int nfree;
};

> #define NBLOCKS(order)          (sizes[order].nblocks)

Summary:
根據page的狀態去調整不同的single link list及用來記個數的變數。